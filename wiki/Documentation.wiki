  * [Documentation#1._Installation 1. Installation]
    * [Documentation#1.1_Installing_OpenCV 1.1 Installing OpenCV]
    * [Documentation#1.2_Installing_Qt 1.2 Installing Qt]
    * [Documentation#1.3_Compiling_&_running_the_application 1.3 Compiling & running the application]
  * [Documentation#2._Using_the_Application 2. Using the Application]
  * [Documentation#3._Modifying_the_Source 3. Modifying the Source]
  * [Documentation#4._Hardware 4. Hardware]
    * [Documentation#5.1_Playstation_Eye 5.1 PlayStation Eye]
  * [Documentation#5._Extras 5. Extras]
    * [Documentation#5.1_ARToolKitPlus_Installation 5.1 ARToolKitPlus Installation]
    * [Documentation#5.2_QSerialDevice_Installation 5.2 QSerialDevice Installation]

= 1. Installation =
The installation procedures detailed below have been tested and verified using:
  * Ubuntu 12.04 LTS ("fresh" install)
  * OpenCV 2.4.0
  * Qt SDK version 1.2.1 for Linux/X11 32-bit
== 1.1 Installing OpenCV ==
1. *Open Terminal:* Press Control-Alt T to open a Terminal instance.

2. *Download and install CMake and other required dependencies (Note: `pkg-config` should already be supplied with Ubuntu):*
{{{
$ sudo apt-get update
$ sudo apt-get install build-essential cmake pkg-config
}}}

*Optional packages:*

`libgtk2.0-dev` _The default GUI backend for highgui on OSes other than Windows and MacOSX._

`libtiff4-dev` _For reading and writing TIFF images._

`libjasper-dev` _Library for the coding and manipulation of images (e.g. JPEG-2000 format)._

`libavformat-dev` _Library containing demuxers and muxers for audio/video container formats._

`libswscale-dev` _Library containing video image scaling and colorspace/pixelformat conversion routines._

`libavcodec-dev` _Library containing all the FFmpeg audio/video encoders and decoders._

`libjpeg-dev` _For reading and writing JPEG images._

3. *Download OpenCV 2.4.0 (choose a folder where you wish to download the file to: e.g. home/Downloads):*
{{{
$ cd Downloads
$ wget http://sourceforge.net/projects/opencvlibrary/files/opencv-unix/2.4.0/OpenCV-2.4.0.tar.bz2
}}}

4. *Unpack archive and navigate to the newly created folder containing the OpenCV source:*
{{{
$ tar -xvf OpenCV-2.4.0.tar.bz2
$ cd OpenCV-2.4.0/
}}}

5. *Create a new folder and navigate to it (the build files generated by CMake will go into this folder):*
{{{
$ mkdir release	
$ cd release
}}}

6. *Use CMake to generate the makefile:*

*Note:* Remember to specify the source folder as the last argument while invoking `cmake`.

{{{
$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..
}}}

7. *Compile and install OpenCV:*
{{{
$ sudo make install
}}}

8. *Point system to generated libraries (change path if different):*
{{{
$ export LD_LIBRARY_PATH=~/Downloads/OpenCV-2.4.0/release/lib:$LD_LIBRARY_PATH
$ sudo ldconfig
}}}

9. *(Optional) Use `pkg-config` to simplify the "making/building" of your OpenCV projects:*
{{{
$ pkg-config opencv --libs
}}}
OpenCV dependencies can now be linked with simply: ``pkg-config opencv --cflags --libs``

10. *Restart Ubuntu to complete installation.*

== 1.2 Installing Qt ==
*Note:* Steps 5 and 6 explain how to configure Qt Creator for use with the OpenCV libraries.

1. *Download the latest version of the Qt SDK for Linux/X11 from the Nokia Qt website:* [http://qt.nokia.com/downloads/]

2. *Follow the installation instructions on the download page.*

3. *(Optional) Install Qt Designer (used for GUI designing).*
{{{
$ sudo apt-get install qt4-designer
}}}

4. *Restart Ubuntu to complete installation.*

5. *In Qt Creator, add the following to the .PRO file after creating a project:*
{{{
LIBS += -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_ml -lopencv_video -lopencv_features2d -lopencv_calib3d -lopencv_objdetect -lopencv_contrib -lopencv_legacy -lopencv_flann
}}}

*OR*, if `pkg-config` is being used:
{{{
LIBS += `pkg-config opencv --cflags --libs`
}}}

6. *Include the OpenCV header files in your C/C++ source file(s). For example:*
{{{
#include <opencv/cv.h>
#include <opencv/highgui.h>
}}}

7. *Your Qt-based OpenCV project can now be built and run using Qt Creator!*

== 1.3 Compiling & running the application ==
1. Download the latest stable release of *qt-opencv-multithreaded* and unpack the downloaded archive: [http://code.google.com/p/qt-opencv-multithreaded/downloads/list Downloads]

*OR*

Get the "cutting-edge" version from the SVN repository (requires a SVN client): See instructions [http://code.google.com/p/qt-opencv-multithreaded/source/checkout here].

2. Unpack the downloaded archive and open *qt-opencv-multithreaded.pro* in Qt Creator. You may also be asked to setup the project targets - modify if required and click "Finish".

3. The application can be now be simply modified, compiled and run within Qt Creator!

= 2. Using the Application =
Coming soon.

= 3. Modifying the Source =
Coming soon.

= 4. Hardware =
Please see the [http://opencv.willowgarage.com/ OpenCV] site for a list of supported cameras.

== 4.1 Playstation Eye ==
===Changing the frame rate===

The default frame rate can be changed by modifying and re-building the driver source (_ov534.c_).

Note: The following procedure is based on: http://wiki.tekkotsu.org/index.php/Sony_PlayStation_Eye_driver_install_instructions

1. Get the Linux kernel source:
{{{
$ sudo -s
$ cd /usr/src
$ apt-get update
$ apt-get install -y kernel-package build-essential linux-source
$ tar --bzip2 -xvf linux-source-*.tar.bz2
$ ln -s `find . -type d -name "linux-source-*"` linux
}}}

2. Replace the driver source. This version of the driver has been patched to make 640x480 @ 60 fps the default. 
{{{
$ cd /usr/src/linux/drivers/media/video/gspca
$ mv ov534.c ov534.c.old
$ wget http://qt-opencv-multithreaded.googlecode.com/files/ov534.c
}}}

3. Rebuild the driver modules _ov534_, _gspca_ov534_, and _gspca-main_:
{{{
$ cd /usr/src
$ cp -p linux-headers-$(uname -r)/Module.symvers linux

$ cd /usr/src/linux
$ make oldconfig
$ make modules_prepare
$ make SUBDIRS=drivers/media/video/gspca modules 
}}}

4. Install the new _gspca_ov534_ driver, which also requires replacing _gspca_main_:
{{{
$ cd /usr/src/linux
$ cp -p drivers/media/video/gspca/gspca_main.ko /lib/modules/$(uname -r)/kernel/drivers/media/video/gspca
$ cp -p drivers/media/video/gspca/gspca_ov534.ko /lib/modules/$(uname -r)/kernel/drivers/media/video/gspca
$ depmod
}}}

5. Remove the old drivers, then load the new ones (_gspca_main_ will load automatically):
{{{
modprobe -r gspca_ov534 gspca_main
modprobe gspca_ov534
}}}

6. Test using _qt-opencv-multithreaded_.

_*Note:* This patched driver seems to suffer from flickering issues during heavy image processing. If using qt-opencv-multithreaded, select "Drop frame if image buffer is full" when connecting to the camera to eliminate this problem. If anyone knows a driver fix, please let me know._

= 5. Extras =

== 5.1 ARToolKitPlus Installation ==

_Tested with ARToolKitPlus 2.2.1_

1. *Download the ARToolKitPlus tar.bz2 archive (e.g. to home/Downloads):* [https://launchpad.net/artoolkitplus ARToolKitPlus @ Launchpad]

2. *Open Terminal:* Applications->Accessories->Terminal

3. *Unpack and install (default system installation path is /usr/)*:
{{{
$ cd Downloads
$ tar xvjf ARToolKitPlus-2.2.1.tar.bz2
$ cd ARToolKitPlus-2.2.1
$ mkdir build
$ cd build
$ cmake ..
$ make
$ sudo make install
}}}

4. *Add the following to the Qt .PRO file:*
{{{
LIBS += -lARToolKitPlus
}}}

5. *Include the ARToolKitPlus header files in your C/C++ source file(s). For example:*
{{{
#include <ARToolKitPlus/TrackerSingleMarker.h>
#include <ARToolKitPlus/TrackerMultiMarker.h>
}}}

== 5.2 QSerialDevice Installation ==

1. *In Terminal (requires GIT):*
{{{
$ git clone git://gitorious.org/qserialdevice/qserialdevice.git
}}}

2. *Compile source:*

*Note:* This step requires `udev`:
{{{
sudo apt-get install libudev-dev
}}}

{{{
$ cd qserialdevice
$ qmake BuildLibrary.pro
$ make
}}}

3. *Copy compiled static library to /usr/lib:*
{{{
$ cd src/build/release
$ sudo cp libqserialdevice.a /usr/lib
}}}

4. *Copy header files to /usr/include/qserialdevice:*
{{{
$ sudo mkdir /usr/include/qserialdevice
$ cd ../../qserialdevice
$ sudo cp * /usr/include/qserialdevice
}}}

5. *Copy global header file to /usr/include:*
{{{
cd .. && sudo cp qserialdevice_global.h /usr/include/
}}}

6. *Add the following to the Qt .PRO file:*
{{{
LIBS += -lqserialdevice
}}}

7. *Include the following header file to your C/C++ source file(s):*
{{{
#include <qserialdevice/abstractserial.h>
}}}
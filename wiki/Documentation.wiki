  * [Documentation#1._Introduction 1. Introduction]
  * [Documentation#2._Installation 2. Installation]
    * [Documentation#2.1_Installing_OpenCV 2.1 Installing OpenCV]
    * [Documentation#2.2_Installing_Qt 2.2 Installing Qt]
    * [Documentation#2.3_Compiling_&_running_the_application 2.3 Compiling & running the application]
  * [Documentation#3._Using_the_Application 3. Using the Application]
  * [Documentation#4._Modifying_the_Source 4. Modifying the Source]
  * [Documentation#5._Hardware 5. Hardware]
    * [Documentation#5.1_Playstation_Eye 5.1 Playstation Eye]
  * [Documentation#6._Extras 6. Extras]
    * [Documentation#6.1_ARToolKitPlus_Installation 6.1 ARToolKitPlus Installation]


= 1. Introduction =
This relatively simple multithreaded application can be easily modified to suit the needs of your next Qt GUI-based computer vision project using OpenCV.

Version *1.12* screenshot [http://www.nickdademo.com/wp-content/uploads/2011/02/qt-opencv-multithreaded-1.12.png here].

Version *1.12* screenshot [http://www.nickdademo.com/wp-content/uploads/2011/02/qt-opencv-multithreaded-1.12_dialog.png here] (showing processing settings dialog).

= 2. Installation =
The installation procedures detailed below have been tested and verified using:
  * Ubuntu 10.04.3 LTS ("fresh" install)
  * OpenCV 2.3.0
  * Qt SDK version 1.1.2 for Linux/X11 32-bit
== 2.1 Installing OpenCV ==
1. *Open Terminal:* Applications->Accessories->Terminal

2. *Download and install CMake and other required dependencies:*
{{{
$ sudo apt-get update
$ sudo apt-get install build-essential cmake libgtk2.0-dev libtiff4-dev libjasper-dev libavformat-dev libswscale-dev libavcodec-dev libjpeg62-dev
}}}

3. *Download OpenCV 2.3.0 (choose a folder where you wish to download the file to: e.g. home/Downloads):*
{{{
$ cd Downloads
$ wget http://sourceforge.net/projects/opencvlibrary/files/opencv-unix/2.3/OpenCV-2.3.0.tar.bz2
}}}

4. *Unpack archive and navigate to the newly created folder containing the OpenCV source:*
{{{
$ tar -xvf OpenCV-2.3.0.tar.bz2
$ cd OpenCV-2.3.0/
}}}

5. *Create a new folder and navigate to it (the build files generated by CMake will go into this folder):*
{{{
$ mkdir release	
$ cd release
}}}

6. *Use CMake to generate the makefile:*

*Note:* Remember to specify the source folder as the last argument while invoking `cmake`.

{{{
$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..
}}}

7. *Compile and install OpenCV:*
{{{
$ sudo make install
}}}

8. *Point system to generated libraries (change path if different):*
{{{
$ export LD_LIBRARY_PATH=~/Downloads/OpenCV-2.3.0/release/lib:$LD_LIBRARY_PATH
$ sudo ldconfig
}}}

9. *(Optional) Use `pkg-config` to simplify the "making/building" of your OpenCV projects:*
{{{
$ pkg-config opencv --libs
}}}
OpenCV dependencies can now be linked with simply: ``pkg-config opencv --cflags --libs``

10. *Restart Ubuntu to complete installation.*

== 2.2 Installing Qt ==
*Note:* Steps 4 and 5 explain how to configure Qt Creator for use with the OpenCV libraries.

1. *Download the latest version of the Qt SDK for Linux/X11 from the Nokia Qt website:* [http://qt.nokia.com/downloads/]

2. *Follow the installation instructions on the download page.*

3. *(Optional) Install Qt Designer (used for GUI designing).*
{{{
$ sudo apt-get install qt4-designer
}}}

4. *In Qt Creator, add the following to the .PRO file after creating a project:*
{{{
LIBS += -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_ml -lopencv_video -lopencv_features2d -lopencv_calib3d -lopencv_objdetect -lopencv_contrib -lopencv_legacy -lopencv_flann
}}}

*OR*, if `pkg-config` is being used:
{{{
LIBS += `pkg-config opencv --cflags --libs`
}}}

5. *Include the OpenCV header files in your C/C++ source file(s). For example:*
{{{
#include <opencv/cv.h>
#include <opencv/highgui.h>
}}}

6. *Your Qt-based OpenCV project can now be built and run using Qt Creator!*

== 2.3 Compiling & running the application ==
1. Download the latest stable release of *qt-opencv-multithreaded* and unpack the downloaded archive: [http://code.google.com/p/qt-opencv-multithreaded/downloads/list Downloads]

*OR*

Get the "cutting-edge" version from the SVN repository (requires a SVN client): See instructions [http://code.google.com/p/qt-opencv-multithreaded/source/checkout here].

2. Unpack the downloaded archive and open *qt-opencv-multithreaded.pro* in Qt Creator. You may also be asked to setup the project targets - modify if required and click "Finish".

3. The application can be now be simply modified, compiled and run within Qt Creator!

= 3. Using the Application =
Coming soon.

= 4. Modifying the Source =
Coming soon.

= 5. Hardware =
Please see the [http://opencv.willowgarage.com/ OpenCV] site for a list of supported cameras.

== 5.1 Playstation Eye ==
If you encounter flickering issues when the PS3 Eye USB camera is used with OpenCV, please update your linux kernel with the latest V4L module:

1. *In Terminal (requires GIT):*
{{{
$ git clone git://linuxtv.org/media_build.git
}}}

2. *Navigate to downloaded folder and build source (install required dependencies if prompted):*
{{{
$ cd media_build
$ ./build.sh
}}}

3. *Optional Step:* See *Changing the frame rate* below.

4. *Install module:*
{{{
$ sudo make install
}}}

After updating the V4L module as described above (without the optional Step 3), the default settings for the PS3 Eye will be *30fps @ 640x480*.

===(Optional) Changing the frame rate===

The default frame rate can be changed by simply modifying and re-building the driver source (_ov534.c_) after *Step 2* and then installing the V4L module as described above in *Step 4*.

*Note:* The below procedure only works if you are changing to settings with a resolution of *640x480* (i.e. with possible frame rates of 15fps, 30fps, 40fps, 50fps, 60fps).

3a. *Open the source file:*
{{{
$ sudo gedit linux/drivers/media/video/gspca/ov534.c
}}}

3b. *Find the set_frame_rate() function and within the two structure of structures initializations (rate_0 and rate_1), simply comment out all the options except the one which you would like to use. For example, in the case of 60fps @ 640x480:
{{{
static const struct rate_s rate_0[] = {	/* 640x480 */
	{60, 0x01, 0xc1, 0x04},
	//{50, 0x01, 0x41, 0x02},
	//{40, 0x02, 0xc1, 0x04},
	//{30, 0x04, 0x81, 0x02},
	//{15, 0x03, 0x41, 0x04},
};
static const struct rate_s rate_1[] = {	/* 320x240 */
	//{125, 0x02, 0x81, 0x02},
	//{100, 0x02, 0xc1, 0x04},
	//{75, 0x03, 0xc1, 0x04},
	//{60, 0x04, 0xc1, 0x04},
	//{50, 0x02, 0x41, 0x04},
	//{40, 0x03, 0x41, 0x04},
	//{30, 0x04, 0x41, 0x04},
};
}}}

3c. *Save and close _ov534.c_ and then rebuild the source. In Terminal:*
{{{
$ sudo make
}}}

3d. *After performing *Step 4* above, your chosen frame rate should now be the default when using the PS3 Eye with OpenCV!*

*Note:* The modified driver must be re-installed (i.e. the above procedure must be repeated) if you update your Linux kernel.

= 6. Extras =

== 6.1 ARToolKitPlus Installation ==

_Tested with ARToolKitPlus 2.2.1_

1. *Download the ARToolKitPlus tar.bz2 archive (e.g. to home/Downloads):* [https://launchpad.net/artoolkitplus ARToolKitPlus @ Launchpad]

2. *Open Terminal:* Applications->Accessories->Terminal

3. *Unpack and install (default system installation path is /usr/)*:
{{{
$ cd Downloads
$ tar xvjf ARToolKitPlus-2.2.1.tar.bz2
$ cd ARToolKitPlus-2.2.1
$ mkdir build
$ cd build
$ cmake ..
$ make
$ sudo make install
}}}

4. *Add the following to the Qt .PRO file:*
{{{
LIBS += -lARToolKitPlus
}}}

5. *Include the ARToolKitPlus header files in your C/C++ source file(s). For example:*
{{{
#include <ARToolKitPlus/TrackerSingleMarker.h>
#include <ARToolKitPlus/TrackerMultiMarker.h>
}}}

== 6.2 QSerialDevice Installation ==

1. *In Terminal (requires GIT):*
{{{
$ git clone git://gitorious.org/qserialdevice/qserialdevice.git
}}}

2. *Compile source:*
{{{
$ cd qserialdevice
$ qmake BuildLibrary.pro
$ make
}}}

Note: This requires `udev`: {{{sudo apt-get install udev}}}

3.